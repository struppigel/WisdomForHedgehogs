{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Wisdom for Hedgehogs","text":""},{"location":"#wisdom-for-hedgehogs","title":"Wisdom for Hedgehogs","text":"<p>Knowledge and education are one of the most valuable commodities in this world. On my path while learning a skill and conquering a field, I always took mental notes which resources would have been useful to make things easier. E.g., 2014 Youtube videos about malware analysis were almost non-existent, despite it being a splendid platform to showcase analysis approaches.</p> <p>Hence, I started to create Youtube videos myself. These were of low quality in the beginning, but I figured I will learn and improve on the way. My videos in turn inspired others to do the same, among others OALabs and Michael Gillespie. That was indeed one of the greatest things I could wish for to happen -- that my work would inspire others to share their knowledge too, so they improve availability of educational resources and inspire people themselves.</p> <p>That could have been it, however, at some point I ended up watching old videos of myself just to remember how I solved a certain problem in the past. After I did this for the third time, I finally started taking actual notes which I will convert to publicly available articles over time.</p>"},{"location":"#content","title":"Content","text":"<p>The most interesting section for you are probably the Reversing Tips. It will be filled over time.</p> <p>The essays and guides section as well as the malware articles section contain external articles which I wrote for GDATA Techblog.</p>"},{"location":"#faq","title":"FAQ","text":"<p>I often get questions via Twitter and Reddit DMs. Here are the most frequent ones.</p>"},{"location":"#why-hedgehogs","title":"Why hedgehogs?","text":"<p>So far the resources for hedgehog reversers are very sparse, almost non-existant. That needs to change.</p>"},{"location":"#how-should-i-start-learning-malware-analysis","title":"How should I start learning malware analysis?","text":"<p>I plan to create an article about that. In the meantime, please check this article by Fabian Wosar</p>"},{"location":"#do-i-need-a-degree-certs-to-become-a-malware-analyst","title":"Do I need a degree / certs to become a malware analyst?","text":"<p>No, you don't need it. It might help to get the foot in the door but it is more important that you actually have reversing skills.</p>"},{"location":"About%20me/","title":"About me","text":"<p>I have been working as a Malware Analyst for GDATA CyberDefense AG from January 2015 to October 2022.</p> <p>Half of my work time was devoted to the creation of detection signatures for GDATA antivirus products. The other half I worked for the Public Relations department which included providing technical background checks for articles and statements, talks, webinars, interviews and writing blog articles for GDATA Techblog. </p> <p>Since November 2015 I am Lead Engineer for a small team. Our main responsibility is the improvement of detection and prevention technologies for GDATA's mEDR product. </p>"},{"location":"Execution%20Environments/CPython%20Bytecode%20Reversing/","title":"CPython Bytecode","text":""},{"location":"Execution%20Environments/CPython%20Bytecode%20Reversing/#cpython-bytecode","title":"CPython Bytecode","text":""},{"location":"Execution%20Environments/CPython%20Bytecode%20Reversing/#decompilers-disassemblers-assemblers","title":"Decompilers, Disassemblers, Assemblers","text":"<p>When decompiling CPython bytecode, you need to make sure that the decompiler supports the CPython version</p>"},{"location":"Execution%20Environments/CPython%20Bytecode%20Reversing/#decompilers-and-supported-python-versions","title":"Decompilers and supported Python versions","text":"<p>The most versatile decompiler is probably uncompyle6.</p> decompiler remarks supported versions link uncompyle6 1.4, 2.1-2.7, 3.0-3.8 (diff. branches, see readme) click decompyle3 aka decompile3 recommended to cross check with unpyc37, generally better than uncompyle6 for supported versions 3.7 and 3.8 click uncompyle 2.7 click uncompyle2 by wibiti forked from uncompyle 2.7 click uncompyle2 by Mysterie forked from uncompyle2 by wibiti 2.5, 2.6, 2.7 click unpyc3 by google by google code 3.2 click unpyc3 by figment fork of google code version 3.3 click unpyc37 fork of unpyc3 3.7 click pycdc aka Decompyle++ various, the only decompiler for 3.9+ atm click"},{"location":"Execution%20Environments/CPython%20Bytecode%20Reversing/#disassembler","title":"Disassembler","text":"<p>Most decompilers also have disassembly support but there are some dedicated disassemblers.</p> <ul> <li>dis is part of Python, supports the currently installed python version</li> <li>python-xdis, supports 1.0 - 3.10, does not rely on installed Python version</li> </ul> <p>\ud83d\udd17Python Bytecode Instructions</p> <p>The disassembler is especially useful if premade tools/decompilers fail to extract anything.</p> <p>Inspecting objects:</p> <pre><code>import rich\nimport malwaremodule\nrich.inspect(malwarefunction)\n</code></pre> <p>Disassembly:</p> <pre><code>import dis\nimport malwaremodule\ndis.dis(malwarefunction)\n</code></pre>"},{"location":"Execution%20Environments/CPython%20Bytecode%20Reversing/#assembler","title":"Assembler","text":"<p>python-xasm, for making small patches to existing bytecode</p>"},{"location":"Execution%20Environments/PowerShell/","title":"PowerShell","text":"<p>PowerShell malware is commonly a dropper or downloader for the actual payload which means they are often rather at the beginning of the infection chain. </p> <p>Because PowerShell runs on the .NET Common Language Runtime, it is easy to dynamically load and execute .NET assemblies via PowerShell, making this a common target of PowerShell malware.</p> <p>Malicious Windows Shortcut (LNK) files and Batch files may be used to call PowerShell code, which is why obfuscation techniques related to Batch are often seen in conjunction with PowerShell commands.</p> <p>Commands for PowerShell are also known as cmdlets. They are written in .NET or PowerShell.</p>"},{"location":"Execution%20Environments/PowerShell/#deobfuscation-basics","title":"Deobfuscation Basics","text":"<p>The following sections will help you to deobfuscate PowerShell samples.</p>"},{"location":"Execution%20Environments/PowerShell/#beautifier","title":"Beautifier","text":"<p>Start with beautifying the code, e.g., via:\ud83d\udd17Powershell-Beautifier by DTW-DanWard</p>"},{"location":"Execution%20Environments/PowerShell/#command-help","title":"Command Help","text":"<p>Use the cmdlets Get-Help, Get-Command and Get-Member in a PowerShell terminal to read about unknown commands you find in a script.</p> <p>Before you start, run Update-Help to download the latest help files. </p> <p></p> <p>To get help for a command, e.g., for Update-Help, execute</p> <pre><code>Get-Help -Name Update-Help\n</code></pre> <p>More on this topic: PowerShell 101 - The Help System</p>"},{"location":"Execution%20Environments/PowerShell/#inspect-variables","title":"Inspect variables","text":"<p>To inspect variable contents, use:</p> <pre><code>Write-Output \"Hello\" \"2\" \"3\" # adds newlines\nWrite-Host \"Hello\" \"2\" \"3\"   # without newlines\n</code></pre>"},{"location":"Execution%20Environments/PowerShell/#instruction","title":"'&amp;' Instruction","text":"<p>The '&amp;' is like a call instruction. General syntax: </p> <p><code>&amp; command [args]</code></p> <p>Example:</p> <p><code>&amp; ($SomeObfusVar1) $SomeObfusVar2;</code></p> <p>Replace this with an inspect statement like Write-Output or Write-Host</p>"},{"location":"Execution%20Environments/PowerShell/#obfuscation-methods","title":"Obfuscation methods","text":"<p>This section lists common obfuscation that is specific for PowerShell.</p>"},{"location":"Execution%20Environments/PowerShell/#backticks","title":"Backticks `","text":"<p>Backticks are used for escaping characters in PowerShell and wrapping lines of code. It\u2019s commonly used to escape non-special characters and break-up words to prevent pattern matching.</p> <pre><code>if ( ${CoM`P`U`TERn`AME} -eq ${Nu`LL}\nif ( ${CoMPUTERnAME} -eq ${NuLL}\n</code></pre>"},{"location":"Execution%20Environments/PowerShell/#carets","title":"Carets \\^","text":"<p>Carets are escape characters for the Windows command line.</p> <pre><code>echo i^eX(^\"^I^e^`X^`\necho ieX(\"Ie`X`\n</code></pre>"},{"location":"Execution%20Environments/PowerShell/#empty-quotes","title":"Empty Quotes \"\"","text":"<p>Empty quotes are used to break up variables in PowerShell. </p> <pre><code>(g''v KUs).value.toString()\n(gv KUs).value.toString()\n</code></pre>"},{"location":"Execution%20Environments/PowerShell/#escaped-quotes","title":"Escaped Quotes \\\"","text":"<p>When dealing with layered PowerShell scripts, escaped empty quotes may be passed to substrings.</p> <pre><code>(g\\'\\'v KUs).value.toString()\n(g''v KUs).value.toString()\n</code></pre>"},{"location":"Execution%20Environments/PowerShell/#concatenation","title":"Concatenation","text":"<p>This is not an effective obfuscation against reversers but it works against pattern matching.</p> <pre><code>New-Object $(\"Sys\"+\"tem.Refl\"+\"ection.Ass\"+\"embl\"+\"yName\")\nNew-Object $(\"System.Reflection.AssemblyName\")\n</code></pre>"},{"location":"Execution%20Environments/PowerShell/#obfuscators","title":"Obfuscators","text":"<p>The following obfuscators and obfuscation frameworks are commonly used to during the creation of PowerShell malware. You can play around with them and see how their output looks like.</p>"},{"location":"Execution%20Environments/PowerShell/#invoke-obfuscation","title":"Invoke-Obfuscation","text":"<p>\ud83d\udd17Invoke-Obfuscation</p> <p></p>"},{"location":"Execution%20Environments/PowerShell/#invoke-psobfuscation","title":"Invoke-PSObfuscation","text":"<p>\ud83d\udd17Invoke-PSObfuscation</p> <p></p>"},{"location":"Execution%20Environments/PowerShell/#resources","title":"Resources","text":"<p>\ud83d\udd17PowerShell 101: The No-Nonsense Beginner's Guide to PowerShell</p> <p>This is a leanpup book by Mike F. Robbins.</p> <p>\ud83d\udd17Powershell Obfuscation</p> <p>The developer of Invoke-PSObfuscation describes PowerShell obfuscation techniques with specific code snippets in this blog article.</p> <p>You will find the very same code snippets in slight variations throughout PowerShell malware. So getting familiar with them will help to speed up analysis.</p> <p>\ud83d\udd17Practical Behavioral Profiling of PowerShell Scripts through Static Analysis (Part 2)</p> <p>The section Normalization / Obfuscation Removal provides an overview on common obfuscation techniques.</p> <p>\ud83d\udd17DOSfuscation: Exploring the Depths of Cmd.exe Obfuscation and Detection Techniques</p> <p>This is a paper by FireEye on Batch obfuscation techniques. FireEye probably established the term DOSfuscation. While this is not actually describing PowerShell obfuscation, DOSfuscation is commonly seen in conjunction with PowerShell code because malware often calls PowerShell.exe via cmd.exe.</p>"},{"location":"testpage/","title":"Wisdom for Hedgehogs","text":""},{"location":"testpage/#wisdom-for-hedgehogs","title":"Wisdom for Hedgehogs","text":"<p>Knowledge base for reverse engineering and malware analysis</p> <p></p> <p>Note</p> <p>Admonition test note</p> <p>Let's see how this looks like</p> <p>Buy me a coffee\u2615</p> Warn <p>Admonition test note</p> Info <p>Admonition test note</p>"},{"location":"testpage/#python","title":"Python","text":"<pre><code>import argparse\nimport pefile\nimport struct\ndef extract_resource(raw_data):\npe = pefile.PE(data=raw_data)\ndata_list = []\ntry:\nrt_string_idx = [\nentry.id for entry in \npe.DIRECTORY_ENTRY_RESOURCE.entries\n].index(pefile.RESOURCE_TYPE['RT_STRING'])\nexcept:\nprint(\"resource not found\")\nreturn None\nrt_string_directory = pe.DIRECTORY_ENTRY_RESOURCE.entries[rt_string_idx]\nfor entry in rt_string_directory.directory.entries:\ndata_rva = entry.directory.entries[0].data.struct.OffsetToData\nsize = entry.directory.entries[0].data.struct.Size\ndata = pe.get_memory_mapped_image()[data_rva:data_rva+size]\ndata_list.append(data)\nreturn data_list \ndef extract_strings(resource_data):\nstr_list = []\nfor raw_config in extract_resource(resource_data):\nidx = 0\nwhile(idx &lt; len(raw_config)):\nstr_size = struct.unpack('&lt;H', bytearray(raw_config[idx:idx+2]))[0]\nidx += 2\nstr_size *= 2\nstr = raw_config[idx : idx + str_size].decode('utf-16')\nstr_list.append(str)\nidx += str_size\nreturn str_list\ndef allcome_decrypt(str):\nreturn ''.join([chr(ord(c)-2) for c in str])\nif __name__ == \"__main__\":\nparser = argparse.ArgumentParser(description='AllComeClipper Config Extractor')\nparser.add_argument('-f', '--file', help='file', action='store_true')\nparser.add_argument('file', help='file to decode')\nargs = parser.parse_args()\ntry:\nwith open(args.file,\"rb\") as f:\ndata = f.read()\nstr_list = extract_strings(data)\nprint(str_list)\nfor ctr, str in enumerate(str_list):\nif len(str) &gt; 0:\nprint(ctr, allcome_decrypt(str))\nexcept:\nprint(\"unable to extract config\")\n</code></pre>"},{"location":"testpage/#no-highlight","title":"No highlight","text":"<pre><code>import argparse\nimport pefile\nimport struct\n\ndef extract_resource(raw_data):\n    pe = pefile.PE(data=raw_data)\n    data_list = []\n    try:\n        rt_string_idx = [\n            entry.id for entry in \n            pe.DIRECTORY_ENTRY_RESOURCE.entries\n        ].index(pefile.RESOURCE_TYPE['RT_STRING'])\n    except:\n        print(\"resource not found\")\n        return None\n\n    rt_string_directory = pe.DIRECTORY_ENTRY_RESOURCE.entries[rt_string_idx]\n\n    for entry in rt_string_directory.directory.entries:\n        data_rva = entry.directory.entries[0].data.struct.OffsetToData\n        size = entry.directory.entries[0].data.struct.Size\n        data = pe.get_memory_mapped_image()[data_rva:data_rva+size]\n        data_list.append(data)\n    return data_list \n\ndef extract_strings(resource_data):\n    str_list = []\n    for raw_config in extract_resource(resource_data):\n        idx = 0\n        while(idx &lt; len(raw_config)):\n            str_size = struct.unpack('&lt;H', bytearray(raw_config[idx:idx+2]))[0]\n            idx += 2\n            str_size *= 2\n            str = raw_config[idx : idx + str_size].decode('utf-16')\n            str_list.append(str)\n            idx += str_size\n    return str_list\n\ndef allcome_decrypt(str):\n    return ''.join([chr(ord(c)-2) for c in str])\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description='AllComeClipper Config Extractor')\n    parser.add_argument('-f', '--file', help='file', action='store_true')\n    parser.add_argument('file', help='file to decode')\n    args = parser.parse_args()\n    try:\n        with open(args.file,\"rb\") as f:\n            data = f.read()\n            str_list = extract_strings(data)\n            print(str_list)\n            for ctr, str in enumerate(str_list):\n                if len(str) &gt; 0:\n                    print(ctr, allcome_decrypt(str))\n    except:\n        print(\"unable to extract config\")\n</code></pre>"},{"location":"testpage/Publications%20at%20GDATA/","title":"Publications at GDATA","text":"<p>From 2017 to 2022 half of my work time was devoted to Public Relations department for GDATA which included giving talks, webinars, talking to journalists and writing blog articles for GDATA Techblog. The articles roughly fall into one of two categories:</p> <ol> <li> <p>Essay-like articles and guides, sometimes with a bit more controversial topics</p> </li> <li> <p>Malware news and malware analysis reports</p> </li> </ol>"},{"location":"testpage/Publications%20at%20GDATA/#essays-and-guides","title":"Essays and guides","text":"<ul> <li> <p>Identifying file manipulation in system files</p> </li> <li> <p>The real reason why malware detection is hard--and underestimated</p> </li> <li> <p>Malware vaccines can prevent pandemics, yet are rarely used</p> </li> <li> <p>All your hashes are belong to us: An overview of malware hashing algorithms</p> </li> <li> <p>Malware family naming hell is our own fault (Malware Naming Hell Part 2)</p> </li> <li> <p>Dumping COVID-19.jar with Java Instrumentation</p> </li> <li> <p>PE trick explained: Telling 32 and 64 bit apart with naked eye</p> </li> <li> <p>Malware Naming Hell Part 1: Taming the mess of AV detection names</p> </li> <li> <p>Ransomware identification for the judicious analyst</p> </li> <li> <p>It's Educational - One the No 1 Argument for Open Source Ransomware</p> </li> </ul>"},{"location":"testpage/Publications%20at%20GDATA/#malware-analysis","title":"Malware analysis","text":"<ul> <li> <p>Criminals provide Ginzo stealer for free, now it is gaining traction</p> </li> <li> <p>Allcome clipbanker is a newcomer in underground forums</p> </li> <li> <p>QR codes on Twitter deliver malicious Chrome extension</p> </li> <li> <p>Microsoft signed a malicious Netfilter rootkit</p> </li> <li> <p>Picture this: Malware Hides in Steam Profile Images</p> </li> <li> <p>SectopRAT: New version adds encrypted communication</p> </li> <li> <p>IceRat evades antivirus by running PHP on Java VM</p> </li> <li> <p>Babax stealer rebrands to Osno, install rootkit</p> </li> <li> <p>T-RAT 2.0: Malware control via smartphone</p> </li> <li> <p>DLL Fixer leads to Cyrat Ransomware</p> </li> <li> <p>Try2Cry: Ransomware tries to worm</p> </li> <li> <p>New Java STRRAT ships with .crimson ransomware module</p> </li> <li> <p>Spam campaign: Netwire RAT via paste.ee and MS Excel to German users</p> </li> <li> <p>40,000 CryptBot Downloads per Day: Bitbucket Abused as Malware Slinger</p> </li> <li> <p>Strange Bits: Skull and Crossbones, Bloated Malware, and All-In-One Solution for Ransomware</p> </li> <li> <p>Strange Bits: Sodinokibi Spam, CinaRAT, and Fake G DATA</p> </li> <li> <p>Strange Bits: HTML Smuggling and Github Hosted Malware</p> </li> <li> <p>GarrantyDecrypt Ransomware poses as EnigmaSoft's SpyHunter</p> </li> <li> <p>New SectopRAT: Remote access malware utilizes second desktop to control browsers</p> </li> <li> <p>Spora - the Shortcut Worm that is also a Ransomware</p> </li> </ul>"}]}